import { Component, ElementRef, EventEmitter, Inject, Input, Output } from "@angular/core";
import * as i0 from "@angular/core";
/**
@deprecated This component will be removed in the future. Use DayPilot.Modal instead.
 */
export class DayPilotModalComponent {
    constructor(element) {
        this.element = element;
        this.autoFocus = true;
        this.close = new EventEmitter();
        this._visibility = "hidden";
    }
    get visible() {
        return this._visibility === "visible";
    }
    ngOnInit() {
    }
    show() {
        this._visibility = "visible";
        let element = this.element.nativeElement;
        if (this.autoFocus) {
            setTimeout(() => {
                let first = element.querySelector("input");
                first && first.focus();
            });
        }
    }
    hide(result) {
        this._visibility = "hidden";
        this.close.emit({ "result": result });
    }
}
DayPilotModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DayPilotModalComponent, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Component });
DayPilotModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DayPilotModalComponent, selector: "daypilot-modal", inputs: { autoFocus: "autoFocus" }, outputs: { close: "close" }, ngImport: i0, template: `
    <div
      class="overlay"
      (click)="hide()"
      [class.visible]="visible"
    ></div>
    <div
      class="modal"
      [class.visible]="visible"
    >
      <ng-content></ng-content>
    </div>`, isInline: true, styles: [".modal{position:fixed;top:0px;left:0px;right:0px;max-height:80%;overflow-y:auto;padding:20px;background-color:#fff;transform:translateY(-100%)}.modal.visible{transform:translateY(0)}.overlay{position:fixed;top:0px;left:0px;right:0px;bottom:0px;background-color:#000;opacity:0;margin-left:100%}.overlay.visible{margin-left:0;opacity:.3}.modal{transition:transform .3s cubic-bezier(0,0,.3,1)}.overlay{transition:margin-left 0s linear .3s,opacity .3s}.overlay.visible{transition:margin-left 0s,opacity .3s}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DayPilotModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'daypilot-modal',
                    styles: [`
    .modal {
      position: fixed;
      top: 0px;
      left: 0px;
      right: 0px;
      max-height: 80%;
      overflow-y: auto;
      padding: 20px;
      background-color: white;

      transform: translateY(-100%);
    }

    .modal.visible {
      transform: translateY(0);
    }

    .overlay {
      position: fixed;
      top: 0px;
      left: 0px;
      right: 0px;
      bottom: 0px;
      background-color: #000;

      opacity: 0;
      margin-left: 100%;
    }

    .overlay.visible {
      margin-left: 0;
      opacity: 0.3;
    }

    .modal {
      transition: transform 0.3s cubic-bezier(0, 0, 0.3, 1);
    }

    .overlay {
      transition: margin-left 0s linear 0.3s, opacity 0.3s;
    }

    .overlay.visible {
      transition: margin-left 0s, opacity 0.3s;
    }
  `],
                    template: `
    <div
      class="overlay"
      (click)="hide()"
      [class.visible]="visible"
    ></div>
    <div
      class="modal"
      [class.visible]="visible"
    >
      <ng-content></ng-content>
    </div>`,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { autoFocus: [{
                type: Input
            }], close: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF5cGlsb3QtbW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvZGF5cGlsb3QtcHJvLWFuZ3VsYXIvc3JjL2xpYi9kYXlwaWxvdC1tb2RhbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDOztBQUVqRzs7R0FFRztBQStESCxNQUFNLE9BQU8sc0JBQXNCO0lBTWpDLFlBQXdDLE9BQW1CO1FBQW5CLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFMbEQsY0FBUyxHQUFZLElBQUksQ0FBQztRQUN6QixVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFFaEQsZ0JBQVcsR0FBeUIsUUFBUSxDQUFDO0lBR3JELENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxXQUFXLEtBQUssU0FBUyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxRQUFRO0lBQ1IsQ0FBQztJQUVELElBQUk7UUFDRixJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQztRQUU3QixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUV6QyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDZCxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUMzQyxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQsSUFBSSxDQUFDLE1BQVk7UUFDZixJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQztRQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7O21IQWhDVSxzQkFBc0Isa0JBTWIsVUFBVTt1R0FObkIsc0JBQXNCLHVIQWJ2Qjs7Ozs7Ozs7Ozs7V0FXRDsyRkFFRSxzQkFBc0I7a0JBOURsQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLE1BQU0sRUFBRSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBOENSLENBQUM7b0JBQ0YsUUFBUSxFQUFFOzs7Ozs7Ozs7OztXQVdEO2lCQUNWOzswQkFPYyxNQUFNOzJCQUFDLFVBQVU7NENBTHJCLFNBQVM7c0JBQWpCLEtBQUs7Z0JBQ0ksS0FBSztzQkFBZCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5qZWN0LCBJbnB1dCwgT25Jbml0LCBPdXRwdXR9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbi8qKlxuQGRlcHJlY2F0ZWQgVGhpcyBjb21wb25lbnQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIFVzZSBEYXlQaWxvdC5Nb2RhbCBpbnN0ZWFkLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkYXlwaWxvdC1tb2RhbCcsXG4gIHN0eWxlczogW2BcbiAgICAubW9kYWwge1xuICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgdG9wOiAwcHg7XG4gICAgICBsZWZ0OiAwcHg7XG4gICAgICByaWdodDogMHB4O1xuICAgICAgbWF4LWhlaWdodDogODAlO1xuICAgICAgb3ZlcmZsb3cteTogYXV0bztcbiAgICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcblxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMDAlKTtcbiAgICB9XG5cbiAgICAubW9kYWwudmlzaWJsZSB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XG4gICAgfVxuXG4gICAgLm92ZXJsYXkge1xuICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgdG9wOiAwcHg7XG4gICAgICBsZWZ0OiAwcHg7XG4gICAgICByaWdodDogMHB4O1xuICAgICAgYm90dG9tOiAwcHg7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xuXG4gICAgICBvcGFjaXR5OiAwO1xuICAgICAgbWFyZ2luLWxlZnQ6IDEwMCU7XG4gICAgfVxuXG4gICAgLm92ZXJsYXkudmlzaWJsZSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIG9wYWNpdHk6IDAuMztcbiAgICB9XG5cbiAgICAubW9kYWwge1xuICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuM3MgY3ViaWMtYmV6aWVyKDAsIDAsIDAuMywgMSk7XG4gICAgfVxuXG4gICAgLm92ZXJsYXkge1xuICAgICAgdHJhbnNpdGlvbjogbWFyZ2luLWxlZnQgMHMgbGluZWFyIDAuM3MsIG9wYWNpdHkgMC4zcztcbiAgICB9XG5cbiAgICAub3ZlcmxheS52aXNpYmxlIHtcbiAgICAgIHRyYW5zaXRpb246IG1hcmdpbi1sZWZ0IDBzLCBvcGFjaXR5IDAuM3M7XG4gICAgfVxuICBgXSxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2XG4gICAgICBjbGFzcz1cIm92ZXJsYXlcIlxuICAgICAgKGNsaWNrKT1cImhpZGUoKVwiXG4gICAgICBbY2xhc3MudmlzaWJsZV09XCJ2aXNpYmxlXCJcbiAgICA+PC9kaXY+XG4gICAgPGRpdlxuICAgICAgY2xhc3M9XCJtb2RhbFwiXG4gICAgICBbY2xhc3MudmlzaWJsZV09XCJ2aXNpYmxlXCJcbiAgICA+XG4gICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgPC9kaXY+YCxcbn0pXG5leHBvcnQgY2xhc3MgRGF5UGlsb3RNb2RhbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGF1dG9Gb2N1czogYm9vbGVhbiA9IHRydWU7XG4gIEBPdXRwdXQoKSBjbG9zZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgcHJpdmF0ZSBfdmlzaWJpbGl0eTogXCJ2aXNpYmxlXCIgfCBcImhpZGRlblwiID0gXCJoaWRkZW5cIjtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZikge1xuICB9XG5cbiAgZ2V0IHZpc2libGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Zpc2liaWxpdHkgPT09IFwidmlzaWJsZVwiO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gIH1cblxuICBzaG93KCkge1xuICAgIHRoaXMuX3Zpc2liaWxpdHkgPSBcInZpc2libGVcIjtcblxuICAgIGxldCBlbGVtZW50ID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICBpZiAodGhpcy5hdXRvRm9jdXMpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBsZXQgZmlyc3QgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKTtcbiAgICAgICAgZmlyc3QgJiYgZmlyc3QuZm9jdXMoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGhpZGUocmVzdWx0PzogYW55KSB7XG4gICAgdGhpcy5fdmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgdGhpcy5jbG9zZS5lbWl0KHtcInJlc3VsdFwiOiByZXN1bHR9KTtcbiAgfVxufVxuIl19