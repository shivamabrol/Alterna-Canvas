export function rand() {
    return ((1 + Math.random()) * 0x10000) | 0;
}
;
export function optHash(options) {
    return JSON.stringify(options);
}
;
export class EventDiff {
    constructor() {
        this.orig = { "hashes": {} };
    }
    diff(list) {
        const orig = this.orig;
        let result = {};
        // new hashes, new ids
        let hashes = {};
        list = list || [];
        for (let i = 0; i < list.length; i++) {
            let e = list[i];
            let id = e.id;
            if (!id) {
                throw "The 'id' property must be specified for event data object";
            }
            if (hashes.hasOwnProperty("" + id)) {
                throw "Duplicate event IDs are not allowed, id: " + id;
            }
            hashes["" + id] = JSON.stringify(e);
        }
        // array of new objects
        result.add = list.filter(function (item) {
            return !orig.hashes.hasOwnProperty(item.id);
        });
        // array of IDs
        result.remove = Object.getOwnPropertyNames(orig.hashes).filter(function (id) {
            return !hashes.hasOwnProperty(id);
        }).map(function (id) {
            return JSON.parse(orig.hashes[id]).id;
        }); // array of ids
        // array of new objects
        result.modify = list.filter(function (item) {
            return orig.hashes.hasOwnProperty(item.id) && orig.hashes[item.id] !== hashes[item.id];
        });
        result.changeCount = result.add.length + result.modify.length + result.remove.length;
        orig.hashes = hashes;
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2RheXBpbG90LXByby1hbmd1bGFyL3NyYy9saWIvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLFVBQVUsSUFBSTtJQUNsQixPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQzVDLENBQUM7QUFBQSxDQUFDO0FBRUYsTUFBTSxVQUFVLE9BQU8sQ0FBQyxPQUFZO0lBQ2xDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBQUEsQ0FBQztBQUVGLE1BQU0sT0FBTyxTQUFTO0lBQXRCO1FBQ0UsU0FBSSxHQUFRLEVBQUMsUUFBUSxFQUFFLEVBQUUsRUFBQyxDQUFDO0lBNEM3QixDQUFDO0lBMUNDLElBQUksQ0FBQyxJQUFXO1FBQ2QsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN2QixJQUFJLE1BQU0sR0FBUSxFQUFFLENBQUM7UUFFckIsc0JBQXNCO1FBQ3RCLElBQUksTUFBTSxHQUFRLEVBQUUsQ0FBQztRQUNyQixJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNsQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNwQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNkLElBQUksQ0FBQyxFQUFFLEVBQUU7Z0JBQ1AsTUFBTSwyREFBMkQsQ0FBQzthQUNuRTtZQUNELElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7Z0JBQ2xDLE1BQU0sMkNBQTJDLEdBQUcsRUFBRSxDQUFDO2FBQ3hEO1lBQ0QsTUFBTSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3JDO1FBRUQsdUJBQXVCO1FBQ3ZCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUk7WUFDckMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztRQUVILGVBQWU7UUFDZixNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUN6RSxPQUFPLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFO1lBQ2pCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDLENBQUUsZUFBZTtRQUVwQix1QkFBdUI7UUFDdkIsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSTtZQUN4QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pGLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUVyRixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUVyQixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcmFuZCgpIHtcbiAgcmV0dXJuICgoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMCkgfCAwXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gb3B0SGFzaChvcHRpb25zOiBhbnkpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpO1xufTtcblxuZXhwb3J0IGNsYXNzIEV2ZW50RGlmZiB7XG4gIG9yaWc6IGFueSA9IHtcImhhc2hlc1wiOiB7fX07XG5cbiAgZGlmZihsaXN0OiBhbnlbXSkge1xuICAgIGNvbnN0IG9yaWcgPSB0aGlzLm9yaWc7XG4gICAgbGV0IHJlc3VsdDogYW55ID0ge307XG5cbiAgICAvLyBuZXcgaGFzaGVzLCBuZXcgaWRzXG4gICAgbGV0IGhhc2hlczogYW55ID0ge307XG4gICAgbGlzdCA9IGxpc3QgfHwgW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZSA9IGxpc3RbaV07XG4gICAgICBsZXQgaWQgPSBlLmlkO1xuICAgICAgaWYgKCFpZCkge1xuICAgICAgICB0aHJvdyBcIlRoZSAnaWQnIHByb3BlcnR5IG11c3QgYmUgc3BlY2lmaWVkIGZvciBldmVudCBkYXRhIG9iamVjdFwiO1xuICAgICAgfVxuICAgICAgaWYgKGhhc2hlcy5oYXNPd25Qcm9wZXJ0eShcIlwiICsgaWQpKSB7XG4gICAgICAgIHRocm93IFwiRHVwbGljYXRlIGV2ZW50IElEcyBhcmUgbm90IGFsbG93ZWQsIGlkOiBcIiArIGlkO1xuICAgICAgfVxuICAgICAgaGFzaGVzW1wiXCIgKyBpZF0gPSBKU09OLnN0cmluZ2lmeShlKTtcbiAgICB9XG5cbiAgICAvLyBhcnJheSBvZiBuZXcgb2JqZWN0c1xuICAgIHJlc3VsdC5hZGQgPSBsaXN0LmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuICFvcmlnLmhhc2hlcy5oYXNPd25Qcm9wZXJ0eShpdGVtLmlkKTtcbiAgICB9KTtcblxuICAgIC8vIGFycmF5IG9mIElEc1xuICAgIHJlc3VsdC5yZW1vdmUgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvcmlnLmhhc2hlcykuZmlsdGVyKGZ1bmN0aW9uIChpZCkge1xuICAgICAgcmV0dXJuICFoYXNoZXMuaGFzT3duUHJvcGVydHkoaWQpO1xuICAgIH0pLm1hcChmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKG9yaWcuaGFzaGVzW2lkXSkuaWQ7XG4gICAgfSk7ICAvLyBhcnJheSBvZiBpZHNcblxuICAgIC8vIGFycmF5IG9mIG5ldyBvYmplY3RzXG4gICAgcmVzdWx0Lm1vZGlmeSA9IGxpc3QuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gb3JpZy5oYXNoZXMuaGFzT3duUHJvcGVydHkoaXRlbS5pZCkgJiYgb3JpZy5oYXNoZXNbaXRlbS5pZF0gIT09IGhhc2hlc1tpdGVtLmlkXTtcbiAgICB9KTtcblxuICAgIHJlc3VsdC5jaGFuZ2VDb3VudCA9IHJlc3VsdC5hZGQubGVuZ3RoICsgcmVzdWx0Lm1vZGlmeS5sZW5ndGggKyByZXN1bHQucmVtb3ZlLmxlbmd0aDtcblxuICAgIG9yaWcuaGFzaGVzID0gaGFzaGVzO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuIl19